training_set = training_set.iloc[:, 1:2].values
training_set

from sklearn.preprocessing import MinMaxScaler
sc = MinMaxScaler()
training_set = sc.fit_transform(training_set)
training_set

X_train= training_set[0:1257]
y_train= training_set[1:1258]
X_train=np.reshape(X_train, (1257 , 1 , 1))

from keras.models import Sequential
from keras.layers import Dense, LSTM

regressor = Sequential()
regressor.add(LSTM(units=50, activation='sigmoid',return_sequences=True, input_shape=(None, 1)))
regressor.add(LSTM(units=50, activation='sigmoid',return_sequences=True, input_shape=(None, 1)))
regressor.add(Dense(units=1))
regressor.compile(optimizer='adam', loss='mean_squared_error')
regressor.fit(X_train, y_train, batch_size=32, epochs=200)

test_set = pd.read_csv('GoogleStockPrice_Test.csv')
real_stock_price = test_set.iloc[:, 1:2].values
real_stock_price

inputs = real_stock_price
inputs = sc.transform(inputs)
inputs

inputs = np.reshape(inputs, (20, 1, 1))
predicted_stock_price = regressor.predict(inputs)
predicted_stock_price

pred_price = np.reshape(predicted_stock_price, (20, 1))
pred_price = sc.inverse_transform(pred_price)
pred_price

plt.plot( real_stock_price , color = 'red' , label = 'Real Google Stock Price')
plt.plot(pred_price, color='blue', label='Predicted Google Stock Price')
plt.title('Google Stock Price Prediction')
plt.xlabel( 'time' )
plt.ylabel( 'Google Stock Price' )
plt.legend()
plt.show()
